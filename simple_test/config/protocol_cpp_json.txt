
#int, bool, float, string
#serialize:
#with default value:
if($(FIELD) != $(DEFAULT_VALUE))
{
    ::set(json,"$(FIELD)",$(FIELD));
}
#without default value:
::set(json,"$(FIELD)",$(FIELD));

#deserialize:
#with default value:
if(json.isMember("$(FIELD)"))
{
    $(FIELD) = ::get<$(TYPE)>(json["$(FIELD)"]);
}
else
{
    $(FIELD) = $(DEFAULT_VALUE);
}
#without default value:
$(FIELD) = ::get<$(TYPE)>(json["$(FIELD)"]);


#serialized
#serialize:
$(FIELD).serialize(json["$(FIELD)"]);
#deserialize:
$(FIELD).deserialize(json["$(FIELD)"]);


#pointer
#serialize
if($(FIELD))
{
    $(FIELD)->serialize(json["$(FIELD)"][$(FIELD)->get_type()]);
}
#deserialize:
if(json.isMember("$(FIELD)"))
{
    auto type_$(FIELD) = json["$(FIELD)"].getMemberNames()[0];
    $(FIELD) = Factory::shared().build<$(TYPE)>(type_$(FIELD));
    $(FIELD)->deserialize(json["$(FIELD)"][type_$(FIELD)]);
}


#list<bool>
#serialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
int i_$(FIELD)=0;
for(const auto& t : $(FIELD))
{
    arr_$(FIELD)[i_$(FIELD)++] = Json::Value(t);
}
#deserialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
for(int i = 0; i < arr_$(FIELD).size(); ++i)
{
    $(FIELD).emplace_back();
    $(FIELD).back() = ::get<$(ARG_0)>(arr_$(FIELD)[i]);
}

#list<int>, list<float>, list<string>
#serialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
int i_$(FIELD)=0;
for(const auto& t : $(FIELD))
{
    ::set(arr_$(FIELD)[i_$(FIELD)++], t);
}
#deserialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
for(int i = 0; i < arr_$(FIELD).size(); ++i)
{
    $(FIELD).emplace_back();
    $(FIELD).back() = ::get<$(ARG_0)>(arr_$(FIELD)[i]);
}


#list<serialized>
#serialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
int i_$(FIELD)=0;
for(auto& t : $(FIELD))
{
    t.serialize(arr_$(FIELD)[i_$(FIELD)++]);
}
#deserialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
for(int i = 0; i < arr_$(FIELD).size(); ++i)
{
    $(FIELD).emplace_back();
    $(FIELD).back().deserialize(arr_$(FIELD)[i]);
}


#pointer_list
#serialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
for(auto& t : $(FIELD))
{
    auto index = arr_$(FIELD).size();
    t->serialize(arr_$(FIELD)[index][t->get_type()]);
}
#deserialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
auto size_$(FIELD) = arr_$(FIELD).size();
for(int i = 0; i < size_$(FIELD); ++i)
{
    auto type = arr_$(FIELD)[i].getMemberNames()[0];
    auto obj = Factory::shared().build<$(ARG_0)>(type);
    $(FIELD).emplace_back(obj);
    $(FIELD).back()->deserialize(arr_$(FIELD)[i][type]);
}


#link
#serialize:
::set(json,"$(FIELD)",$(FIELD)->name);
#deserialize:
$(FIELD) = DataStorage::shared().get<$(TYPE)>(::get<std::string>(json["$(FIELD)"]));


#list<link>
#serialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
for(auto& item : $(FIELD))
{
    auto index = arr_$(FIELD).size();
    arr_$(FIELD).append(item->name);
}
#deserialize:
auto& arr_$(FIELD) = json["$(FIELD)"];
for(auto item : arr_$(FIELD))
{
    auto name = ::get<std::string>(item);
    auto data = DataStorage::shared().get<$(ARG_0)>(name);
    $(FIELD).push_back(data);
}


#map
#serialize:
auto& map_$(FIELD) = json["$(FIELD)"];
for(auto& pair : $(FIELD))
{
    auto& json = map_$(FIELD)[map_$(FIELD).size()];
    auto& key = pair.first;
    auto& value = pair.second;
    $(KEY_SERIALIZE)
    $(VALUE_SERIALIZE)
}
#deserialize:
auto& map_$(FIELD) = json["$(FIELD)"];
auto size_$(FIELD)= map_$(FIELD).size();
for(unsigned int i = 0; i < size_$(FIELD); ++i)
{
    auto& json = map_$(FIELD)[i];
    $(KEY);
    $(VALUE_TYPE) value;
    $(VALUE_SERIALIZE)
    $(KEY_SERIALIZE)
    $(FIELD)[key] = value;
}


#enum
#serialize:
::set(json, "$(FIELD)", $(FIELD).str());
#deserialize:
$(FIELD) = ::get<std::string>(json["$(FIELD)"]);